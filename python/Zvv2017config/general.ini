[General]
Debug = True

merge = True
weightexpression = 1
lumi = 41290 
mergeCachingSize = 3

# V5 ntuples
#electronMVA80 = Electron_mvaFall17Iso_WP80 
#electronMVA90 = Electron_mvaFall17Iso_WP90
# V11 ntuples
electronMVA80 = Electron_mvaFall17V2Iso_WP80 
electronMVA90 = Electron_mvaFall17V2Iso_WP90

electronMVA = <!General|electronMVA80!>

MVAtype = DNN
dataset = 2017

# which dataset use for TT control region. both have been tested to yield very similar TT scale factors and not too different event yields!
# HIG16044 analysis: MET dataset used, HIG18016: SingleLepton used
#TTdataset = SingleLepton
TTdataset = MET

# CMVA/DeepCSV
#btagMethod = CMVA
btagMethod = DeepCSV

# b-taging
# --------------------------------------------------------------------------------------------------
hJidx_CMVA = hJidxCMVA
hJidx_DeepCSV = hJidx
hJidx = <!General|hJidx_<!General|btagMethod!>!>

btagidx0 = <!General|hJidx!>[0]
btagidx1 = <!General|hJidx!>[1]

btag0       = <!General|Jet_btag!>[<!General|btagidx0!>]
btag1       = <!General|Jet_btag!>[<!General|btagidx1!>]

; CMVA settings
Jet_btag_CMVA = Jet_btagCMVA
btagWP_Loose_CMVA = -0.5884
btagWP_Medium_CMVA = 0.4432
btagWP_Tight_CMVA = 0.9432
; DeepCSV
Jet_btag_DeepCSV = Jet_btagDeepB
btagWP_Loose_DeepCSV = 0.1522
btagWP_Medium_DeepCSV = 0.4941
btagWP_Tight_DeepCSV = 0.8001

; select WP depending on tagger selected in samples_nosplit.ini
Jet_btag = <!General|Jet_btag_<!General|btagMethod!>!>
CMVAL    = <!General|btagWP_Loose_<!General|btagMethod!>!>
CMVAM    = <!General|btagWP_Medium_<!General|btagMethod!>!>
CMVAT    = <!General|btagWP_Tight_<!General|btagMethod!>!>

[Configuration]
# general config
channel       = Zvv
TreeCopierPSI = True
files_per_job = 50
nprocesses    = 0

run_locally   = False

# NanoAOD format
treeName            = Events
countTreeName       = genEventSumw
AllowDuplicateTrees = True
countsFromAutoPU    = False
haddTargetNumEvents = 16000

[SubmitOptions]
# increase memory for sys step (for kinematic fit)
submitScriptSpecialOptions = {'sysnew': ' -l h_vmem=6g '}


[Prep]
VHbb = ['VHbbCommon.Clean','VHbbCommon.JetSmearer','VHbbCommon.METXY','Prep.Selection', 'VHbbCommon.isData','VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus']
Selection = VHbbSelection.VHbbSelection(year="2017", channels=["Znn"])

[Sys]
all = ['VHbbCommon.SampleGroup','VHbbCommon.EWKweights', 'VHbbCommon.BTagSFDeepCSV', 'VHbbCommon.HiggsReco', 'VHbbCommon.isGGZH', 'VHbbCommon.vLeptons', 'Sys.newBranches', 'Sys.metTriggerSF', 'Sys.fill1','Sys.fill2','Sys.fill3','VHbbCommon.LOtoNLOweight', 'VHbbCommon.TTweights', 'VHbbCommon.DYspecialWeight','VHbbCommon.JetPUIDSF','VHbbCommon.DoubleBtagSF','VHbbCommon.isBoosted','VHbbCommon.isBoostedVZ']

# add weights/scale factors
metTriggerSF    = METtriggerFromWS.METtriggerFromWS(workspace="data/met/vhbb_metsf.root", fName="met_trig_sf120_2017", metCut=100.0)

# for TT CR
electronSF      = ElectronSFfromJSON.ElectronSFfromJSON(jsonFiles=['data/Wlv/Electrons/VHbb1ElectronIDISO2017.json','data/Wlv/Electrons/VHbb1ElectronTrigger2017.json', 'data/Wlv/Electrons/ScaleFactor_etracker_80x.json'], branchName='electronSF',channel='Wlv')
muonSF          = MuonSFfromJSON.MuonSFfromJSON(jsonFiles=['data/Wlv/Muons/VHbb1MuonIDISO2017.json','data/Wlv/Muons/VHbb1MuonTrigger2017.json','data/Zll/Muons/RunBCDEF_SF_ID.json'], branchName='muonSF',channel='Wlv')

# new branches
newBranches = BranchTools.TreeFormulas({
    'dPhiMetTkMet':     'abs(TVector2::Phi_mpi_pi(MET_Phi-TkMET_phi))',
    'dPhiVH':           'abs(TVector2::Phi_mpi_pi(V_phi-H_phi))',
    'dPhiMetH':         'abs(TVector2::Phi_mpi_pi(MET_Phi-H_phi))',
    'nVetoElectrons':   {'formula': 'Sum$(Electron_pt>6.5&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.4&&abs(Electron_dz)<0.2&&abs(Electron_dxy)<0.05&&Electron_lostHits<1.0)', 'type': 'i'},
    'nVetoMuons':       {'formula': 'Sum$(Muon_pt>4.5&&abs(Muon_eta)<2.4&&Muon_pfRelIso04_all<0.4&&abs(Muon_dz)<0.2&&abs(Muon_dxy)<0.05)', 'type': 'i'},
    })

# fill branches with a default if they don't exist to have the same branches everywhere afterwards
#  this will avoid problems when hadding single files
fill1 = BranchTools.DefaultIfNotExisting(branchName='HLT_PFMET120_PFMHT120_IDTight',branchType='O',defaultValue=0)
fill2 = BranchTools.DefaultIfNotExisting(branchName='HLT_PFMET120_PFMHT120_IDTight_PFHT60',branchType='O',defaultValue=0)
fill3 = BranchTools.DefaultIfNotExisting(branchName='LHE_HT',branchType='f',defaultValue=0)

aJidx = aJidx.aJidx()

[Eval]
all = <!.|VHLegacyDNNs!> + <!.|BOOSTED!> + ['Eval.weightAsBranch']

# DNNs
VH       = ['Eval.DNN', 'Eval.CRDNN'] 
DNN      = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')
CRDNN    = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Zhf_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

VHLegacyDNNs     = ['Eval.SR_medhigh_Znn','Eval.Zhf_med_Znn','Eval.Zhf_high_Znn']
SR_medhigh_Znn   = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')
Zhf_med_Znn_0j   = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Zhf_med_Znn_0j',condition='hJidx[0]>-1&&hJidx[1]>-1')
Zhf_med_Znn_ge1j = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Zhf_med_Znn_ge1j',condition='hJidx[0]>-1&&hJidx[1]>-1')
Zhf_med_Znn      = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Zhf_med_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')
Zhf_high_Znn     = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Zhf_high_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

Zhf_medhigh_Znn  = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Zhf_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

# multi
Multi_medhigh_Znn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')
multiDNN = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

# VZ resolved
VV                = <!.|VZ!>
VZ                = ['Eval.VV_SR_medhigh_Znn', 'Eval.VV_Zhf_med_Znn', 'Eval.VV_Zhf_high_Znn'] 
VV_SR_medhigh_Znn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Zhf_med_Znn    = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Zhf_med_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Zhf_high_Znn   = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Zhf_high_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

# massless evaluation
ME_SR_medhigh_Znn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='ME_SR_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

# mjj
mjj      = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Mjj_SR_medhigh_Znn',condition='hJidx[0]>-1&&hJidx[1]>-1')

# include total weight as a branch (this now includes weight cross section to lumi!)
weightAsBranch = WeightAsBranch.WeightAsBranch()

BOOSTED                = ['Eval.BDT_Zvv_BOOSTFinal_wdB']
BDT_Zvv_BOOSTFinal_wdB = tmvaEvaluator.tmvaEvaluator(mvaName='BDT_Zvv_BOOSTFinal_wdB',condition='Hbb_fjidx>-1')

# VZ BOOSTED
VZ_BOOSTED = ['Eval.BDT_VZ_Zvv_BOOSTFinal_wdB']
BDT_VZ_Zvv_BOOSTFinal_wdB = tmvaEvaluator.tmvaEvaluator(mvaName='BDT_VZ_Zvv_BOOSTFinal_wdB',condition='Hbb_fjidx>-1')

[Analysis]
tag = 13TeV

#-------------------------------------------------
# Compiled Libraries

[VHbbNameSpace]
library = <!Directories|vhbbpath!>/interface/VHbbNameSpace_h.so

#-------------------------------------------------
# MC Weights

[Weights]
useSpecialWeight = True

weightQCD        = 1.0
weightEWK        = EWKw[0]
weightNLO        = weightLOtoNLO_LHEVptV5

# inside FitCorr[0]
weightTT         = 1.0

weightPU         = puWeight
#weightPU         = puWeight_2017CD
#doubleBtagWeight = bTagWeightDoubleB
# the old behavior can be reproduced with: --set='General.DeepAK8weightApplies=(isBoosted)'
doubleBtagWeight = (1.0+<!General|DeepAK8weightApplies!>*(-1.0+bTagWeightDoubleB))
bTagWeight       = (isBoosted+!isBoosted*(bTagWeightDeepCSV))
#bTagWeight       = bTagWeightDeepCSV
weight_mettrigSF = weight_mettrigSF
#FitCorr          = FitCorr[0]
FitCorr          = 1.0
weightJetPUID    = weightJetPUID
weightNaddJetsResidual = 1.0

PrefireWeight    = PrefireWeight

# if useSpecialWeight is set to True, specialweight is evaluated on the fly when creating datacards/plots, if it is set to False, it is read from the tree
stitchingWeights_False  = DY_specialWeight
stitchingWeights_True   = 1.0
stitchingWeights        = <!Weights|stitchingWeights_<!.|useSpecialWeight!>!>

weight_B = ((((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)<0.1)*(1.03405176e+00+-2.03029776e-01*(MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt))+((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)>=0.1)*(1.03405176e+00+-2.03029776e-01*0.1+1.69364440e+00*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)+-1.60532618e+00*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)**2))*(1.25143867e+00+-4.63660374e-02*SA5)*(1.08399147e+00+-7.82636848e-02*abs(TVector2::Phi_mpi_pi(MET_Phi-TkMET_phi)))*(max(5.87180655e-01+9.70824241e-04*MET_Pt+-1.69867519e-06*MET_Pt*MET_Pt,0.1)))
weight_C = 1.0
weight_D = ((((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)<0.1)*(8.18435627e-01+1.38478075e+00*(MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt))+((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)>=0.1)*(8.18435627e-01+1.38478075e+00*0.1+5.15019094e-01*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)+-9.76901083e-01*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)**2))*(1.08487110e+00+-8.80027935e-03*SA5)*(1.07753408e+00+5.60222759e-02*abs(TVector2::Phi_mpi_pi(MET_Phi-TkMET_phi)))*(max(1.42263433e+00+-3.13824526e-03*MET_Pt+4.39071574e-06*MET_Pt*MET_Pt,0.1)))
weight_E = ((((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)<0.1)*(1.14279564e+00+-1.36787081e+00*(MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt))+((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)>=0.1)*(1.14279564e+00+-1.36787081e+00*0.1+1.61651785e+00*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)+-1.31909780e+00*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)**2))*(1.22105382e+00+-2.84245637e-02*SA5)*(1.07604066e+00+7.98948154e-01*abs(TVector2::Phi_mpi_pi(MET_Phi-TkMET_phi)))*(max(3.34002295e-01+2.39398095e-03*MET_Pt+-4.01596325e-06*MET_Pt*MET_Pt,0.1)))
weight_F = ((((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)<0.1)*(9.29170291e-01+-1.60010141e+00*(MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt))+((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)>=0.1)*(9.29170291e-01+-1.60010141e+00*0.1+6.04493137e-01*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)+2.43796640e+00*((MET_Pt-TkMET_pt)/(TkMET_pt+MET_Pt)-0.1)**2))*(1.24801298e+00+-5.82835455e-02*SA5)*(1.01830501e+00+1.37648915e+00*abs(TVector2::Phi_mpi_pi(MET_Phi-TkMET_phi)))*(max(-1.57738920e-01+6.38862130e-03*MET_Pt+-9.35347548e-06*MET_Pt*MET_Pt,0.1)))
runEraWeight = (1.0/<!General|lumi!>*(<!General|lumi_B!>*<!.|weight_B!>+<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_E!>*<!.|weight_E!>+<!General|lumi_F!>*<!.|weight_F!>))
#additionalCorrection = <!.|runEraWeight!>
additionalCorrection = 1.0 

weightF = genWeight * <!Weights|weightPU!> * <!Weights|bTagWeight!> * <!Weights|weightQCD!> * <!Weights|weightEWK!> * <!Weights|weightNLO!> * <!Weights|weightTT!> * <!Weights|weight_mettrigSF!> * <!Weights|FitCorr!> * <!Weights|stitchingWeights!> * <!Weights|additionalCorrection!> * <!Weights|weightJetPUID!> * <!Weights|weightNaddJetsResidual!> * <!Weights|PrefireWeight!> * <!Weights|doubleBtagWeight!>

weightF_noRunEraWeight = genWeight * <!Weights|weightPU!> * <!Weights|bTagWeight!> * <!Weights|weightQCD!> * <!Weights|weightEWK!> * <!Weights|weightNLO!> * <!Weights|weightTT!> * <!Weights|weight_mettrigSF!> * <!Weights|FitCorr!> * <!Weights|stitchingWeights!> * <!Weights|weightJetPUID!> * <!Weights|weightNaddJetsResidual!> * <!Weights|PrefireWeight!> * <!Weights|doubleBtagWeight!>

weight_noNLO  = <!.|weightF!>/<!Weights|weightNLO!> 
weight_noBTag = <!.|weightF!>/<!Weights|bTagWeight!>
weight_noPU   = genWeight * <!Weights|bTagWeight!> * <!Weights|weightQCD!> * <!Weights|weightEWK!> * <!Weights|weightNLO!> * <!Weights|weightTT!> * <!Weights|weight_mettrigSF!> * <!Weights|FitCorr!> * <!Weights|stitchingWeights!> * <!Weights|additionalCorrection!> * <!Weights|weightJetPUID!> * <!Weights|weightNaddJetsResidual!> * <!Weights|PrefireWeight!> * <!Weights|doubleBtagWeight!> 
weight_noEWK = <!.|weightF!>/<!Weights|weightEWK!> 
weight_noFitCorr = <!.|weightF!>/<!.|FitCorr!>

# prefire correction
CMS_vhbb_PrefireWeight_13TeV_UP   = <!Weights|weightF!>/<!Weights|PrefireWeight!>*PrefireWeight_Up
CMS_vhbb_PrefireWeight_13TeV_DOWN = <!Weights|weightF!>/<!Weights|PrefireWeight!>*PrefireWeight_Down

# --------------------------------------------------------------------------------------------------------------
# test-only weights below
# --------------------------------------------------------------------------------------------------------------

CMS_vhbb_ttbar_nAddJets_UP   = <!Weights|weightF!>*<!Weights|weightNaddJetsResidual!>
CMS_vhbb_ttbar_nAddJets_DOWN = <!Weights|weightF!>/<!Weights|weightNaddJetsResidual!>

CMS_vhbb_jetPUID_UP   = <!Weights|weightF!>/<!Weights|weightJetPUID!>*weightJetPUID_Up
CMS_vhbb_jetPUID_DOWN = <!Weights|weightF!>/<!Weights|weightJetPUID!>*weightJetPUID_Down

CMV_vhbb_runEra2017_UP = <!Weights|weightF!>*(<!.|runEraWeight!>)
CMV_vhbb_runEra2017_DOWN = <!Weights|weightF!>/(<!.|runEraWeight!>)

# run Era uncertainties
CMS_vhbb_runEra2017B_UP = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>+<!General|lumi_B!>)*(2*<!General|lumi_B!>*<!.|weight_B!>+<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_E!>*<!.|weight_E!>+<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017B_DOWN = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>-<!General|lumi_B!>)*(<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_E!>*<!.|weight_E!>+<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017D_UP = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>+<!General|lumi_D!>)*(<!General|lumi_B!>*<!.|weight_B!>+<!General|lumi_C!>*<!.|weight_C!>+2*<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_E!>*<!.|weight_E!>+<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017D_DOWN = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>-<!General|lumi_D!>)*(<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_E!>*<!.|weight_E!>+<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017E_UP = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>+<!General|lumi_E!>)*(<!General|lumi_B!>*<!.|weight_B!>+<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+2*<!General|lumi_E!>*<!.|weight_E!>+<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017E_DOWN = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>-<!General|lumi_E!>)*(<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017F_UP = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>+<!General|lumi_F!>)*(<!General|lumi_B!>*<!.|weight_B!>+<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_E!>*<!.|weight_E!>+2*<!General|lumi_F!>*<!.|weight_F!>))
CMS_vhbb_runEra2017F_DOWN = <!Weights|weightF_noRunEraWeight!>*(1.0/(<!General|lumi!>-<!General|lumi_F!>)*(<!General|lumi_C!>*<!.|weight_C!>+<!General|lumi_D!>*<!.|weight_D!>+<!General|lumi_E!>*<!.|weight_E!>))


